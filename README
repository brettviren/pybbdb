==============================================================
 PyBBDB -- an interface to the Insidious Big Brother Database
==============================================================

.. contents::

Introduction
============

PyBBDB may sound like a rude noise, but it is actually a Python interface
to the Insidious Big Brother Database (BBDB_), an address book used with
`GNU Emacs`_.  You can find out more about BBDB on the `Emacs Wiki`_.

.. note::

   This module only handles BBDB version 2.  There is a version 3 in
   development on Savannah_, but there has been no public release as yet.

Installation
============

It's the usual incantation::

    python setup.py install

You'll need to install the pyparsing_ module too.

Usage
=====

Creating a BBDB database
------------------------

To create a new, empty database::

    >>> from bbdb import BBDB
    >>> db = BBDB()
    >>> db
    <BBDB: 0 records>

Creating new records
--------------------

To add a new record, use the ``add_record()`` method, specifying the
attributes you want to set::

    >>> fred = db.add_record(firstname="Fred", lastname="Flintstone")
    >>> fred
    <Record: Fred Flintstone>

You can use the returned entry to set other BBDB attributes::

    >>> fred.set_company("Slate Rock & Gravel")

A ``Record`` is a subclass of ``OrderedDict``, so you can set or modify
attributes in this style::

    >>> fred["company"] = "Slate Rock & Gravel"

As a convenience, there are properties for each of the valid attributes::

    >>> fred.firstname
    'Fred'

    >>> fred.company
    'Slate Rock & Gravel'

There's also a composite ``name`` property::

    >>> fred.name
    'Fred Flintstone'

Some BBDB attributes consist of lists of things, and there are ``add()``
methods for these::

    >>> fred.add_net("fred@bedrock.org")
    >>> fred.add_net("fred.flintstone@gravel.com")
    >>> fred.net
    ['fred@bedrock.org', 'fred.flintstone@gravel.com']

    >>> fred.add_aka("Freddie")
    >>> fred.aka
    ['Freddie']

Telephone records consist of a location tag and a phone number string::

    >>> fred.add_phone("Home", "555-1234")
    >>> fred.add_phone("Work", "555-6789")
    >>> fred.phone
    OrderedDict([('Home', '555-1234'), ('Work', '555-6789')])

Records can have multiple addresses, each indexed by a location tag.  Each
address in turn has several attributes::

    >>> home = fred.add_address("Home")
    >>> home.add_line("Cave 2a", "345 Cavestone Road")
    >>> home.set_city("Bedrock")
    >>> home.set_state("Hanna Barbera")
    >>> home.set_zipcode("12345")
    >>> home.set_country("USA")

    >>> home
    <Address: Cave 2a, 345 Cavestone Road, Bedrock, Hanna Barbera, 12345, USA>

    >>> home.lines
    ['Cave 2a', '345 Cavestone Road']

    >>> home.zipcode
    '12345'

Finally, each entry can have an arbitrary dictionary of user-defined
fields::

    >>> fred.add_field("spouse", "Wilma")
    >>> fred.add_field("kids", "Pebbles, Bam-Bam")
    >>> fred.add_field("catchphrase", '"Yabba dabba doo!"')
    >>> fred.fields
    OrderedDict([('spouse', 'Wilma'), ('kids', 'Pebbles, Bam-Bam'), ('catchphrase', '"Yabba dabba doo!"')])

Reading and writing BBDB files
------------------------------

The ``write()`` method will write the database to a stream (default
``stdout``)::

    >>> db.write()                        # doctest: +ELLIPSIS
    ;; -*-coding: utf-8-emacs;-*-
    ;;; file-version: 6
    ;;; user-fields: (spouse kids catchphrase)
    ["Fred" "Flintstone" ("Freddie") "Slate Rock & Gravel" (["Home" "555-1234"] ...

The convenience ``write_file()`` method will put that in a file::

    >>> db.write_file("bbdb.el")

You can read a file by passing it in when you create the BBDB object::

    >>> newdb = BBDB("bbdb.el")
    >>> newdb
    <BBDB: 1 records>

    >>> newdb == db
    True

The ``read_file()`` method of BBDB objects can be used to concatenate
databases.

Exporting to other formats
--------------------------

Since a BBDB object is a subclass of ``OrderedDict``, you can easily
serialize it to other formats.  For example, JSON::

    >>> import sys
    >>> import json
    >>> json.dump(db, sys.stdout, indent=4)
    {
        "coding": "utf-8-emacs", 
        "fileversion": 6, 
        "userfields": [
            "spouse", 
            "kids", 
            "catchphrase"
        ], 
        "records": [
            {
                "firstname": "Fred", 
                "lastname": "Flintstone", 
                "company": "Slate Rock & Gravel", 
                "aka": [
                    "Freddie"
                ], 
                "phone": {
                    "Home": "555-1234", 
                    "Work": "555-6789"
                }, 
                "address": {
                    "Home": {
                        "lines": [
                            "Cave 2a", 
                            "345 Cavestone Road"
                        ], 
                        "city": "Bedrock", 
                        "state": "Hanna Barbera", 
                        "zipcode": "12345", 
                        "country": "USA"
                    }
                }, 
                "net": [
                    "fred@bedrock.org", 
                    "fred.flintstone@gravel.com"
                ], 
                "fields": {
                    "spouse": "Wilma", 
                    "kids": "Pebbles, Bam-Bam", 
                    "catchphrase": "\"Yabba dabba doo!\""
                }, 
                "cache": null
            }
        ]
    }

Here's a vague sketch of how to recreate a database from a dict::

    >>> text = json.dumps(db, indent=4)
    >>> data = json.loads(text)
    >>> newdb = BBDB(**data)
    >>> json.dump(newdb, sys.stdout, indent=4)
    >>> newdb == db

Release history
===============

Version 0.1 (unreleased)
------------------------

* Initial release.

Feedback
========

Report any problems, bugs, etc, to me (Glenn Hutchings) at
zondo42@gmail.com.  Patches will also be welcome!

.. _BBDB: http://bbdb.sourceforge.net
.. _Emacs Wiki: http://www.emacswiki.org/emacs/CategoryBbdb
.. _GNU Emacs: https://www.gnu.org/software/emacs
.. _Savannah: https://savannah.nongnu.org/projects/bbdb
.. _pyparsing: https://pypi.python.org/pypi/pyparsing
